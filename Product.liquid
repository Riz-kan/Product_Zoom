<!-- ====== HEAD (fonts + theme globals) ====== -->
<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500&family=Playfair+Display:wght@400;500&display=swap" rel="stylesheet">

<!-- Theme globals required by product-form.js -->
<script>
  window.Theme = window.Theme || {};
  Theme.routes = Theme.routes || { cart_add_url: "{{ routes.cart_add_url }}" };
  Theme.translations = Theme.translations || { added: "Added to cart" };
</script>

<!-- Your theme components -->
<script src="{{ 'product-form.js' | asset_url }}" type="module"></script>
<script src="{{ 'fly-to-cart-init.js' | asset_url }}" type="module"></script>

<section class="pdp-scope">
  <div class="product-wrapper">
    <!-- LEFT: Product Image + Thumbnails + Mobile Scroller -->
    <div class="product-image">
      <div class="product-thumbnails" id="pdp-productThumbnails"></div>
      <img
        id="pdp-mainProductImage"
        src=""
        alt="Product image"
        role="button"
        tabindex="0"
        aria-haspopup="dialog"
        aria-label="Open image gallery"
      />
      <!-- MOBILE: Horizontal image scroller -->
      <div class="mobile-image-strip" id="pdp-mobileImageStrip" aria-label="Product Images" tabindex="0"></div>
    </div>

    <!-- RIGHT: Product Info & Form -->
    <div class="product-form">
      <p class="product-label">NEW ARRIVAL</p>
      <h1 class="product-title">CloudNine Hanging Rest Spot</h1>
      <p class="product-price">$19.99</p>

      <!-- Selling points (with top/bottom dividers) -->
      <div class="sp-block" aria-label="Product highlights">
        <ul class="sp-list">
          <li>
            <span class="sp-icon dot" aria-hidden="true"></span>
            <span>Ready to ship</span>
          </li>

          <li>
            <span class="sp-icon" aria-hidden="true">
              <!-- Truck -->
              <svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5.83268 15.8333C6.27471 15.8333 6.69863 15.6577 7.01119 15.3452C7.32375 15.0326 7.49935 14.6087 7.49935 14.1667C7.49935 13.7246 7.32375 13.3007 7.01119 12.9882C6.69863 12.6756 6.27471 12.5 5.83268 12.5C5.39065 12.5 4.96673 12.6756 4.65417 12.9882C4.34161 13.3007 4.16602 13.7246 4.16602 14.1667C4.16602 14.6087 4.34161 15.0326 4.65417 15.3452C4.96673 15.6577 5.39065 15.8333 5.83268 15.8333ZM14.166 15.8333C14.608 15.8333 15.032 15.6577 15.3445 15.3452C15.6571 15.0326 15.8327 14.6087 15.8327 14.1667C15.8327 13.7246 15.6571 13.3007 15.3445 12.9882C15.032 12.6756 14.608 12.5 14.166 12.5C13.724 12.5 13.3001 12.6756 12.9875 12.9882C12.6749 13.3007 12.4993 13.7246 12.4993 14.1667C12.4993 14.6087 12.6749 15.0326 12.9875 15.3452C13.3001 15.6577 13.724 15.8333 14.166 15.8333Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
                <path d="M11.666 14.1667V5.5C11.666 5.36739 11.6133 5.24021 11.5196 5.14645C11.4258 5.05268 11.2986 5 11.166 5H2.16602C2.03341 5 1.90623 5.05268 1.81246 5.14645C1.71869 5.24021 1.66602 5.36739 1.66602 5.5V13.6667C1.66602 13.7323 1.67895 13.7973 1.70408 13.858C1.7292 13.9187 1.76603 13.9738 1.81246 14.0202C1.85889 14.0666 1.91401 14.1035 1.97467 14.1286C2.03534 14.1537 2.10035 14.1667 2.16602 14.1667H3.87435M11.666 14.1667H7.54102M11.666 14.1667H12.4993M11.666 7.5H16.341C16.4377 7.50002 16.5322 7.52806 16.6133 7.58071C16.6943 7.63336 16.7584 7.70837 16.7977 7.79667L18.2893 11.1533C18.3178 11.2171 18.3325 11.286 18.3327 11.3558V13.6667C18.3327 13.7323 18.3197 13.7973 18.2946 13.858C18.2695 13.9187 18.2327 13.9738 18.1862 14.0202C18.1398 14.0666 18.0847 14.1035 18.024 14.1286C17.9634 14.1537 17.8983 14.1667 17.8327 14.1667H16.2493" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
              </svg>
            </span>
            <span>Worldwide shipping available</span>
          </li>

          <li>
            <span class="sp-icon" aria-hidden="true">
              <!-- Tag -->
              <svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M7.864 18.4498L1.50004 12.0859C1.40627 11.9921 1.35359 11.8649 1.35359 11.7323C1.35359 11.5997 1.40627 11.4725 1.50004 11.3787L9.20691 3.67187C9.32476 3.55402 9.49447 3.50217 9.65887 3.53458L14.9622 4.59524C15.059 4.61457 15.148 4.66216 15.2178 4.73201C15.2877 4.80185 15.3353 4.89082 15.3546 4.98768L16.4153 10.291C16.4314 10.3718 16.4273 10.4553 16.4034 10.5342C16.3794 10.613 16.3363 10.6848 16.278 10.7429L8.5711 18.4498C8.52468 18.4962 8.46956 18.5331 8.40889 18.5582C8.34823 18.5833 8.28321 18.5963 8.21755 18.5963C8.15189 18.5963 8.08687 18.5833 8.02621 18.5582C7.96555 18.5331 7.91043 18.4962 7.864 18.4498Z" stroke="currentColor" stroke-width="1.5"></path>
                <circle cx="12.084" cy="7.91663" r="1.125" fill="none" stroke="currentColor" stroke-width="1.5"></circle>
              </svg>
            </span>
            <span>Buy 5 and get 2 free!</span>
          </li>
        </ul>
      </div>

      <div class="product-rating">★★★★★ <span>(4.7)</span></div>
      <p class="product-shade" style="display:none;">Shade: <span id="selectedShade"></span></p>

      <!-- COLOR SWATCHES -->
      <div class="swatch-wrapper" id="pdp-swatchWrapper"></div>

      <p class="product-description">
        The ultimate chill zone for comfort-loving cats—CloudNine™ gives them a front-row seat to the outside world while soaking up the sun. Watch them stretch, lounge, and snooze as elevated views ease anxiety and satisfy their inner observer. Minimal, secure, and irresistibly cozy—your cat’s new favorite spot starts here.
      </p>

      <product-form-component data-product-id="7770300416118" data-url="{{ routes.cart_add_url }}">
        <form id="pdp-form" method="post">
          <input type="hidden" name="id" value="" ref="variantId" id="pdp-variantIdInput"/>

          <!-- Quantity (inside the form) -->
          <div class="quantity-wrapper">
            <button type="button" class="qty-btn" id="pdp-qtyMinus">−</button>
            <span class="qty-display" id="pdp-qtyValue">1</span>
            <button type="button" class="qty-btn" id="pdp-qtyPlus">+</button>
            <input type="hidden" name="quantity" value="1" id="pdp-quantityInput"/>
          </div>

          <add-to-cart-component
            ref="addToCartButtonContainer"
            id="pdp-addToCartComponent"
            data-product-variant-media=""
            data-add-to-cart-animation="true">
            <button
              type="submit"
              ref="addToCartButton"
              class="atc-button"
              onclick="
                this.closest('add-to-cart-component').handleClick(event);
                this.closest('product-form-component').handleSubmit(event);
              "
              aria-label="Add this item to your cart">
              <span class="bg-slide"></span>
              <span class="label">ADD TO CART</span>
            </button>
          </add-to-cart-component>

          <!-- Error container used by product-form.js -->
          <p ref="addToCartTextError" class="add-to-cart-error hidden" aria-live="polite"></p>

          <!-- Optional accelerated checkout block (toggles hidden/unhidden by product-form.js) -->
          <div ref="acceleratedCheckoutButtonContainer" hidden></div>

          <button type="button" class="buy-now-button">BUY IT NOW</button>
          <div ref="liveRegion" class="visually-hidden" aria-live="polite"></div>
        </form>
      </product-form-component>

      <!-- Accordion -->
      <div class="product-details-accordion">
        <section class="accordion-section" aria-label="Product details">
          <div class="accordion">
            <button class="accordion-header" type="button" aria-expanded="false" aria-controls="acc-panel-1" id="acc-trigger-1">
              <span>Shipping</span>
              <span class="accordion-icon">+</span>
            </button>
            <div class="accordion-body" id="acc-panel-1" role="region" aria-labelledby="acc-trigger-1">
              <div class="accordion-content">
                <p>For orders placed before 7am AEDT, we endeavour to process the same business day. Orders placed after 11am AEDT will be processed the next business day.</p>
                <p>During sale events and new collection launches, there may be a slightly longer processing time.</p>
                <p>All orders are hand-picked and packed with care.</p>
              </div>
            </div>
          </div>

          <div class="accordion">
            <button class="accordion-header" type="button" aria-expanded="false" aria-controls="acc-panel-2" id="acc-trigger-2">
              <span>Returns</span>
              <span class="accordion-icon">+</span>
            </button>
            <div class="accordion-body" id="acc-panel-2" role="region" aria-labelledby="acc-trigger-2">
              <div class="accordion-content">
                <p>You can choose between a refund or a credit note on full-priced items.</p>
                <ul>
                  <li>Item(s) must be returned in original condition and packaging.</li>
                  <li>Earrings cannot be returned for health reasons.</li>
                  <li>Return shipping is the customer’s responsibility.</li>
                  <li>Sale items are not refundable for change of mind.</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="accordion">
            <button class="accordion-header" type="button" aria-expanded="false" aria-controls="acc-panel-3" id="acc-trigger-3">
              <span>Fabric &amp; Care</span>
              <span class="accordion-icon">+</span>
            </button>
            <div class="accordion-body" id="acc-panel-3" role="region" aria-labelledby="acc-trigger-3">
              <div class="accordion-content">
                <p>Composition: 98% Cotton, 2% Elastane. Soft hand-feel with light stretch.</p>
                <ul>
                  <li>Machine wash cold, gentle cycle</li>
                  <li>Wash with like colors</li>
                  <li>Do not bleach</li>
                  <li>Line dry; cool iron on reverse if needed</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="accordion">
            <button class="accordion-header" type="button" aria-expanded="false" aria-controls="acc-panel-4" id="acc-trigger-4">
              <span>Size &amp; Fit</span>
              <span class="accordion-icon">+</span>
            </button>
            <div class="accordion-body" id="acc-panel-4" role="region" aria-labelledby="acc-trigger-4">
              <div class="accordion-content">
                <p>Fits true to size. Peplum hem hits at the high hip; square neckline.</p>
                <ul>
                  <li>Model is 174cm / 5'8" and wears size S</li>
                  <li>Body length (S): 54cm; Chest (S): 86cm</li>
                  <li>Refer to the size guide for exact measurements</li>
                </ul>
              </div>
            </div>
          </div>
        </section>
      </div>
      <!-- /Accordion -->
    </div>
  </div>
  <div class="pdp-zoom" aria-hidden="true">
    <div class="pdp-lightbox" id="pdp-lightbox" role="dialog" aria-modal="true" aria-hidden="true">
      <div class="counter" id="pdp-zoomCounter" aria-live="polite"></div>
      <div class="controls">
        <button class="btn" type="button" id="pdp-zoomToggle" aria-label="Zoom in">
          <svg width="15" height="15" viewBox="0 0 20 20" fill="none" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            <path d="M10 4V16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            <path d="M4 10H16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </button>
        <button class="btn" type="button" id="pdp-closeZoom" aria-label="Close">
          <svg width="15" height="15" viewBox="0 0 20 20" fill="none" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            <path d="M5 5L15 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
            <path d="M15 5L5 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
          </svg>
        </button>
      </div>
      <div class="side-nav">
        <button class="btn" type="button" id="pdp-prevZoom" aria-label="Previous image">
          <svg width="15" height="15" viewBox="0 0 20 20" fill="none" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            <path d="M12.5 5L7.5 10L12.5 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <button class="btn" type="button" id="pdp-nextZoom" aria-label="Next image">
          <svg width="15" height="15" viewBox="0 0 20 20" fill="none" aria-hidden="true" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.5 5L12.5 10L7.5 15" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
      <div class="bottom" id="pdp-zoomDots"></div>
      <div class="stage" id="pdp-zoomStage">
        <img id="pdp-zoomedImage" class="pdp-zoom-image" alt="" />
      </div>
    </div>
  </div>
</section>

<style>
  .hidden { display: none !important; }
  .visually-hidden {
    position: absolute !important; width: 1px; height: 1px; padding: 0; margin: -1px;
    overflow: hidden; clip: rect(0 0 0 0); white-space: nowrap; border: 0;
  }

  .pdp-scope body { font-family: 'Inter', sans-serif; }
  .pdp-scope .product-wrapper {
    display: flex; gap: 2rem; max-width: 1400px; margin: 0 auto; padding: 2rem 3rem;
    align-items: flex-start;
  }
  .pdp-scope .product-image { flex: 0 0 50%; display: flex; gap: 1rem; position: relative; align-items: flex-start; }
  .pdp-scope .product-thumbnails { display: flex; flex-direction: column; gap: 0.4rem; width: 20%; max-width: 60px; }
  .pdp-scope .thumbnail { aspect-ratio: 3/4; width: 100%; object-fit: cover; border: none; cursor: pointer; transition: outline 0.2s; }
  .pdp-scope .thumbnail.active { outline: 1px solid #000; outline-offset: 2px; }
  .pdp-scope #pdp-mainProductImage {
    aspect-ratio: 4/5;
    width: 90%;
    object-fit: cover;
    display: block;
    cursor: zoom-in;
  }
  .pdp-scope #pdp-mainProductImage:focus-visible {
    outline: 2px solid #000;
    outline-offset: 2px;
  }
  .pdp-scope .mobile-image-strip { display: none; }
  .pdp-scope .product-form { flex: 0 0 50%; }

  .pdp-scope .product-label { font-size: 0.7rem; color: #999; letter-spacing: 1.2px; margin-bottom: 0.4rem; text-transform: uppercase; }
  .pdp-scope .product-title { font-family: "Playfair Display", serif; font-size: 2rem; font-weight: 500; margin-bottom: 0.4rem; letter-spacing: 0.5px; }
  .pdp-scope .product-price { font-size: 1.3rem;margin-top: 0;  font-weight: 400; margin-bottom: 0.95rem; }
  .pdp-scope .product-rating { font-size: 0.95rem; margin-bottom: 0.7rem; }
  .pdp-scope .product-rating span { color: #aaa; margin-left: 0.25em; }
  /* Selling points block with top/bottom dividers */
  .pdp-scope .sp-block{
    border-top:1px solid #e3e3e3;
    border-bottom:1px solid #e3e3e3;
    padding:10px 0;
    margin:12px 0; /* space from price & rating */
  }

  /* List + icons (scoped) */
  .pdp-scope .sp-list{list-style:none;margin:0;padding:0}
  .pdp-scope .sp-list li{
    display:grid;
    grid-template-columns:1.2em 1fr;
    align-items:center;
    column-gap:12px;
    color:#555;
    font-size:.95rem;
    line-height:1.4;
    margin:2px 0;
  }
  .pdp-scope .sp-icon{width:.95em;height:.95em;display:inline-grid;place-items:center;color:inherit}
  .pdp-scope .sp-icon svg{width:.95em;height:.95em;display:block}

  /* Green dot with subtle pulse */
  .pdp-scope .sp-icon.dot{
    position:relative;width:.8em;height:.8em;border-radius:50%;
    background:#79C48B;
  }
  .pdp-scope .sp-icon.dot::after{
    content:"";position:absolute;inset:0;border-radius:50%;
    background:#79C48B;opacity:.35;animation:pulse .9s ease-out infinite
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce){
    .pdp-scope .sp-icon.dot::after{animation:none;opacity:.25}
  }

  @keyframes pulse{
    0%{transform:scale(1);opacity:.35}
    70%{transform:scale(2.2);opacity:0}
    100%{transform:scale(1);opacity:0}
  }
  .pdp-scope .product-shade { font-size: 0.85rem; margin-bottom: 0.5rem; }
  .pdp-scope .product-description {
    font-size: 0.9rem;
    line-height: 1.4;
    margin-bottom: 1.2rem;
    font-weight: 300;
    color: #555;
  }

  .pdp-scope .atc-button { background: #fff; color: #111; border: 1px solid #111; padding: 0.75rem 1.5rem; font-size: 1rem; width: 100%; margin-bottom: 0.5rem; transition: all 0.3s ease; }
  .pdp-scope .atc-button:hover { background: #111; color: #fff; }
  .pdp-scope .buy-now-button { background: #111; color: #fff; border: none; padding: 0.75rem 1.5rem; font-size: 1rem; width: 100%; transition: background 0.3s ease; }
  .pdp-scope .buy-now-button:hover { background: #333; }
  .pdp-scope .add-to-cart-error { color: #c62828; font-size: .9rem; margin:.5rem 0 1rem; }

  .pdp-scope .swatch-wrapper { display: flex; align-items: center; gap: 0.4rem; margin-bottom: 1.1rem; }
  .pdp-scope .swatch { width: 26px; height: 26px; cursor: pointer; }
  .pdp-scope .swatch.selected { outline: 1px solid #111; outline-offset: 2px; }

  .pdp-scope .quantity-wrapper { display: flex; align-items: center; gap: 1rem; margin-bottom: 1.1rem; margin-top: 0.3rem; }
  .pdp-scope .qty-btn { width: 38px; height: 30px; border: 1px solid #ccc; background: #fff; cursor: pointer; font-size: 1.05rem; }
  .pdp-scope .qty-display { font-size: 0.98rem; }

  /* Accordion compact style */
  .pdp-scope .product-details-accordion { margin-top: 1.5rem; }
  .pdp-scope .accordion-section {
    margin-top: 1.5rem;
    padding-top: 0rem;
    border-top: 1px solid #e3e3e3;
    font-family: 'Inter', sans-serif;
  }
  .pdp-scope .accordion { border-bottom: 1px solid #e3e3e3; }
  .pdp-scope .accordion-header {
    width: 100%;
    display: flex; align-items: center; justify-content: space-between;
    padding: 0.6rem 0;        /* compact vertical padding */
    background: none; border: 0; cursor: pointer; text-align: left;
    font-size: 0.9rem;       /* smaller text */
    font-weight: 300;
    letter-spacing: 0.01em;
    color: inherit;
  }
  .pdp-scope .accordion-header:focus-visible { outline: 2px solid #000; outline-offset: 2px; }
  .pdp-scope .accordion-icon { font-size: 0.85rem; transition: transform 0.3s ease; }
  .pdp-scope .accordion-body { overflow: hidden; max-height: 0; transition: max-height 0.35s ease; will-change: max-height; }
  .pdp-scope .accordion-content { padding: 0 0 1rem; font-size: 0.9rem; line-height: 1.4; color: #555; }
  .pdp-scope .accordion-content ul { margin: 0.5rem 0 0 1.25rem; }

  @media (min-width: 1024px) {
    .pdp-scope .product-image { position: sticky; top: 88px; }
  }
  @media (max-width: 768px) {
    .pdp-scope .product-wrapper { flex-direction: column; padding: 1rem; }
    .pdp-scope .product-image, .pdp-scope .product-form { width: 100%; }
    .pdp-scope .product-thumbnails, .pdp-scope #pdp-mainProductImage { display: none !important; }
    .pdp-scope .mobile-image-strip {
      display: flex; flex-direction: row; overflow-x: auto; gap: 1rem;
      scroll-snap-type: x mandatory; -webkit-overflow-scrolling: touch; width: 100%;
      border-radius: 0; margin-bottom: 1.5rem; padding-left: 0 !important; padding-right: 0 !important; scrollbar-width: none;
    }
    .pdp-scope .mobile-image-strip::-webkit-scrollbar { display: none !important; width: 0; height: 0; background: transparent; }
    .pdp-scope .mobile-image-strip img {
      flex: 0 0 75vw; width: 75vw; max-width: 75vw; object-fit: cover; aspect-ratio: 3/4;
      scroll-snap-align: start; border: none; display: block; background: #fafafa;
    }
  }

  .pdp-scope .pdp-zoom {
    --pdp-zoom-btn-size: 32px;
    --pdp-zoom-btn-bg: #242424;
    --pdp-zoom-btn-bg-hover: #333;
    --pdp-zoom-btn-fg: #fff;
    --pdp-zoom-edge-gap: 18px;
    --pdp-zoom-dot: 10px;
    --pdp-zoom-ui-fade: 160ms;
  }
  .pdp-scope .pdp-lightbox {
    position: fixed;
    inset: 0;
    background: #fff;
    display: none;
    z-index: 999;
  }
  .pdp-scope .pdp-lightbox.open { display: block; }
  .pdp-scope .pdp-lightbox .stage {
    position: absolute;
    inset: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    touch-action: none;
  }
  .pdp-scope .pdp-zoom-image {
    display: block;
    width: auto;
    height: auto;
    max-width: 90vw;
    max-height: 90vh;
    cursor: grab;
    user-select: none;
    -webkit-user-drag: none;
    will-change: transform;
    opacity: 1;
    transition: transform 0.12s ease, opacity 0.24s ease;
    transform-origin: 50% 50%;
  }
  .pdp-scope .pdp-zoom-image.is-swapping {
    opacity: 0;
  }
  .pdp-scope .pdp-lightbox.dragging .pdp-zoom-image {
    cursor: grabbing;
    transition: none;
  }
  .pdp-scope .pdp-lightbox .controls,
  .pdp-scope .pdp-lightbox .side-nav,
  .pdp-scope .pdp-lightbox .bottom,
  .pdp-scope .pdp-lightbox .counter {
    position: absolute;
    z-index: 3;
  }
  .pdp-scope .pdp-lightbox .controls {
    top: var(--pdp-zoom-edge-gap);
    right: var(--pdp-zoom-edge-gap);
    display: flex;
    gap: 10px;
  }
  .pdp-scope .pdp-lightbox .side-nav {
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    pointer-events: none;
    display: flex;
    justify-content: space-between;
    padding: 0 var(--pdp-zoom-edge-gap);
  }
  .pdp-scope .pdp-lightbox .side-nav .btn { pointer-events: auto; }
  .pdp-scope .pdp-lightbox .counter {
    top: var(--pdp-zoom-edge-gap);
    left: var(--pdp-zoom-edge-gap);
    font-size: 13px;
    color: #111;
    opacity: 0.7;
  }
  .pdp-scope .pdp-lightbox .bottom {
    bottom: 16px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 10px;
  }
  .pdp-scope .pdp-lightbox .btn {
    width: var(--pdp-zoom-btn-size);
    height: var(--pdp-zoom-btn-size);
    margin: 15px 15px 5px 5px;
    padding: 0;
    background: var(--pdp-zoom-btn-bg);
    color: var(--pdp-zoom-btn-fg);
    border: none;
    border-radius: 0;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    font-size: 0;
    line-height: 1;
    cursor: pointer;
    transition: background 0.2s ease, transform 0.1s ease, opacity var(--pdp-zoom-ui-fade) ease;
    box-shadow: none;
  }
  .pdp-scope .pdp-lightbox .btn svg {
    width: 15px;
    height: 15px;
  }
  .pdp-scope .pdp-lightbox #pdp-zoomToggle,
  .pdp-scope .pdp-lightbox #pdp-closeZoom {
    margin: 0;
  }
  .pdp-scope .pdp-lightbox .btn:hover { background: var(--pdp-zoom-btn-bg-hover); }
  .pdp-scope .pdp-lightbox .btn:active { transform: scale(0.96); }
  .pdp-scope .pdp-lightbox .dot {
    width: var(--pdp-zoom-dot);
    height: var(--pdp-zoom-dot);
    border-radius: 50%;
    border: 1.5px solid #111;
    background: transparent;
    padding: 0;
    cursor: pointer;
  }
  .pdp-scope .pdp-lightbox .dot[aria-current="true"] { background: #111; }
  .pdp-scope .pdp-lightbox.ui-hidden .controls .btn,
  .pdp-scope .pdp-lightbox.ui-hidden .side-nav .btn { opacity: 0; }
  @media (prefers-reduced-motion: reduce) {
    .pdp-scope .pdp-lightbox .btn,
    .pdp-scope .pdp-zoom-image {
      transition: none !important;
    }
  }
</style>

<script type="module">
  const pdpRoot = document.querySelector('.pdp-scope');
  if (!pdpRoot) {
    console.warn('PDP root not found for zoom integration.');
  } else {
    const VARIANTS = [
      {
        id: "42445118799990",
        color: "#ADD8E6",
        title: "Blue",
        images: [
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/Sbfd9b49d5eb548c9bb90a8dfa8b675c9Z.webp?v=1754469861",
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/image_-_2025-08-06T103216.764.jpg?v=1754456548"
        ]
      },
      {
        id: "42445118767222",
        color: "#F5F5DC",
        title: "Beige",
        images: [
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/S35b203ac434149a1ba4677e31bd7e4e2J.webp?v=1754470146",
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/image_-_2025-08-06T103216.764.jpg?v=1754456548"
        ]
      },
      {
        id: "42445118734454",
        color: "#000000",
        title: "Black",
        images: [
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/S8824b71e1a6f47638b1e18eb39e7cb9bo.webp?v=1754469647",
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/image_-_2025-08-06T103216.764.jpg?v=1754456548"
        ]
      },
      {
        id: "42445118832758",
        color: "#FFC0CB",
        title: "Pink",
        images: [
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/S2c775e89f8fa41a4b5643fabe786d4e5x.webp?v=1754469766",
          "https://cdn.shopify.com/s/files/1/0623/9718/6166/files/image_-_2025-08-06T103216.764.jpg?v=1754456548"
        ]
      }
    ];

    const swatchWrapper = pdpRoot.querySelector('#pdp-swatchWrapper');
    const thumbsDiv = pdpRoot.querySelector('#pdp-productThumbnails');
    const mainImage = pdpRoot.querySelector('#pdp-mainProductImage');
    const mobileImageStrip = pdpRoot.querySelector('#pdp-mobileImageStrip');
    const addToCartComponent = pdpRoot.querySelector('#pdp-addToCartComponent');
    const variantIdInput = pdpRoot.querySelector('#pdp-variantIdInput');

    const zoom = createZoomLightbox(pdpRoot);
    let currentVariantImages = [];
    let currentImageIndex = 0;
    const mainImageBaseAlt = (mainImage && mainImage.getAttribute('alt')) || 'Product image';

    function normalizeVariantImages(variant) {
      return (variant.images || []).map((src, i) => ({
        src,
        alt: `${variant.title} image ${i + 1}`
      }));
    }

    function setActiveImage(index) {
      if (!currentVariantImages[index]) {
        return;
      }
      currentImageIndex = index;
      const item = currentVariantImages[index];
      if (mainImage) {
        mainImage.src = item.src;
        mainImage.alt = item.alt || mainImageBaseAlt;
      }
      if (addToCartComponent) {
        addToCartComponent.dataset.productVariantMedia = item.src;
      }
      if (thumbsDiv) {
        const thumbs = thumbsDiv.querySelectorAll('.thumbnail');
        thumbs.forEach((thumb, idx) => {
          thumb.classList.toggle('active', idx === index);
        });
      }
      zoom.setActiveIndex(index);
    }

    function renderThumbnails(images) {
      if (!thumbsDiv) {
        return;
      }
      thumbsDiv.innerHTML = '';
      images.forEach((image, i) => {
        const thumb = document.createElement('img');
        thumb.className = 'thumbnail' + (i === currentImageIndex ? ' active' : '');
        thumb.src = image.src;
        thumb.alt = image.alt || `Thumbnail ${i + 1}`;
        thumb.loading = i === 0 ? 'eager' : 'lazy';
        thumb.decoding = 'async';
        thumb.draggable = false;
        thumb.addEventListener('click', () => {
          setActiveImage(i);
        });
        thumb.addEventListener('dblclick', () => openZoomAt(i, thumb));
        thumbsDiv.appendChild(thumb);
      });
    }

    function renderMobileStrip(images) {
      if (!mobileImageStrip) {
        return;
      }
      mobileImageStrip.innerHTML = '';
      images.forEach((image, i) => {
        const img = document.createElement('img');
        img.src = image.src;
        img.loading = i === 0 ? 'eager' : 'lazy';
        img.decoding = 'async';
        img.draggable = false;
        img.setAttribute('role', 'group');
        img.setAttribute('aria-label', `Image ${i + 1} of ${images.length}`);
        img.addEventListener('click', () => {
          setActiveImage(i);
          openZoomAt(i, img);
        });
        mobileImageStrip.appendChild(img);
      });
    }

    function selectVariant(index) {
      const variant = VARIANTS[index];
      if (!variant) {
        return;
      }
      if (swatchWrapper) {
        swatchWrapper.querySelectorAll('.swatch').forEach((swatch, i) => {
          swatch.classList.toggle('selected', i === index);
        });
      }
      if (variantIdInput) {
        variantIdInput.value = variant.id;
      }
      currentVariantImages = normalizeVariantImages(variant);
      currentImageIndex = 0;
      renderThumbnails(currentVariantImages);
      renderMobileStrip(currentVariantImages);
      zoom.setImages(currentVariantImages);
      setActiveImage(0);
    }

    function openZoomAt(index, opener) {
      if (!currentVariantImages.length) {
        return;
      }
      const targetIndex = typeof index === 'number' ? index : currentImageIndex;
      zoom.openAt(targetIndex, opener);
    }

    if (swatchWrapper) {
      swatchWrapper.innerHTML = '';
      VARIANTS.forEach((variant, idx) => {
        const sw = document.createElement('div');
        sw.className = 'swatch' + (idx === 0 ? ' selected' : '');
        sw.style.backgroundColor = variant.color;
        sw.title = variant.title;
        sw.dataset.variantId = variant.id;
        sw.tabIndex = 0;
        sw.addEventListener('click', () => selectVariant(idx));
        sw.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            selectVariant(idx);
          }
        });
        swatchWrapper.appendChild(sw);
      });
    }

    selectVariant(0);

    if (mainImage) {
      mainImage.addEventListener('click', () => openZoomAt(currentImageIndex, mainImage));
      mainImage.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          openZoomAt(currentImageIndex, mainImage);
        }
      });
    }

    let qty = 1;
    const qtyInput = pdpRoot.querySelector('#pdp-quantityInput');
    const qtyValue = pdpRoot.querySelector('#pdp-qtyValue');
    const qtyPlus = pdpRoot.querySelector('#pdp-qtyPlus');
    const qtyMinus = pdpRoot.querySelector('#pdp-qtyMinus');
    qtyPlus?.addEventListener('click', () => {
      qty = Math.min(10, qty + 1);
      if (qtyValue) qtyValue.textContent = String(qty);
      if (qtyInput) qtyInput.value = String(qty);
    });
    qtyMinus?.addEventListener('click', () => {
      qty = Math.max(1, qty - 1);
      if (qtyValue) qtyValue.textContent = String(qty);
      if (qtyInput) qtyInput.value = String(qty);
    });

    if (mobileImageStrip) {
      let lastIndex = 0;
      let scrollTimeout = 0;
      mobileImageStrip.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = window.setTimeout(() => {
          const images = Array.from(mobileImageStrip.querySelectorAll('img'));
          if (!images.length) {
            return;
          }
          const { scrollLeft } = mobileImageStrip;
          let minDist = Infinity;
          let activeIndex = 0;
          images.forEach((img, idx) => {
            const dist = Math.abs(img.offsetLeft - scrollLeft);
            if (dist < minDist) {
              minDist = dist;
              activeIndex = idx;
            }
          });
          if (activeIndex !== lastIndex) {
            lastIndex = activeIndex;
            setActiveImage(activeIndex);
          }
        }, 100);
      });
    }

    const accordionContainer = pdpRoot.querySelector('.product-details-accordion');
    if (accordionContainer) {
      const allowMultiple = true;
      const accordions = accordionContainer.querySelectorAll('.accordion');

      const openAcc = (acc) => {
        const header = acc.querySelector('.accordion-header');
        const panel = acc.querySelector('.accordion-body');
        const icon = acc.querySelector('.accordion-icon');
        if (!panel || !header) return;
        panel.style.maxHeight = panel.scrollHeight + 'px';
        header.setAttribute('aria-expanded', 'true');
        acc.classList.add('open');
        if (icon) icon.textContent = '−';
      };

      const closeAcc = (acc) => {
        const header = acc.querySelector('.accordion-header');
        const panel = acc.querySelector('.accordion-body');
        const icon = acc.querySelector('.accordion-icon');
        if (!panel || !header) return;
        panel.style.maxHeight = panel.scrollHeight + 'px';
        void panel.offsetHeight;
        panel.style.maxHeight = '0px';
        header.setAttribute('aria-expanded', 'false');
        acc.classList.remove('open');
        if (icon) icon.textContent = '+';
      };

      const toggleAcc = (targetAcc) => {
        const isOpen = targetAcc.classList.contains('open');
        if (!allowMultiple) {
          accordions.forEach((acc) => {
            if (acc !== targetAcc) closeAcc(acc);
          });
        }
        isOpen ? closeAcc(targetAcc) : openAcc(targetAcc);
      };

      accordions.forEach((acc) => {
        const header = acc.querySelector('.accordion-header');
        const panel = acc.querySelector('.accordion-body');
        const icon = acc.querySelector('.accordion-icon');
        if (!header || !panel) return;

        header.addEventListener('click', () => toggleAcc(acc));
        header.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            toggleAcc(acc);
          }
        });

        header.setAttribute('aria-expanded', 'false');
        panel.style.maxHeight = '0px';
        acc.classList.remove('open');
        if (icon) icon.textContent = '+';
      });

      window.addEventListener('resize', () => {
        accordionContainer.querySelectorAll('.accordion.open .accordion-body').forEach((panel) => {
          panel.style.maxHeight = panel.scrollHeight + 'px';
        });
      });

      const firstAccordion = accordions[0];
      if (firstAccordion) openAcc(firstAccordion);
    }

    function createZoomLightbox(scope) {

      const lightbox = scope.querySelector('#pdp-lightbox');
      const stage = scope.querySelector('#pdp-zoomStage');
      const zoomedImage = scope.querySelector('#pdp-zoomedImage');
      const zoomToggle = scope.querySelector('#pdp-zoomToggle');
      const closeBtn = scope.querySelector('#pdp-closeZoom');
      const prevBtn = scope.querySelector('#pdp-prevZoom');
      const nextBtn = scope.querySelector('#pdp-nextZoom');
      const dotsWrap = scope.querySelector('#pdp-zoomDots');
      const counter = scope.querySelector('#pdp-zoomCounter');
      const iconZoomIn = zoomToggle ? zoomToggle.innerHTML.trim() : '';
      const iconZoomReset = '<svg width="15" height="15" viewBox="0 0 20 20" fill="none" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"><path d="M4 10H16" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>';

      if (!lightbox || !stage || !zoomedImage || !zoomToggle || !closeBtn || !prevBtn || !nextBtn || !dotsWrap || !counter) {
        return {
          setImages() {},
          openAt() {},
          setActiveIndex() {}
        };
      }

      const body = document.body;
      const state = { scale: 1, min: 1, max: 6, tx: 0, ty: 0, baseW: 0, baseH: 0, viewW: 0, viewH: 0 };
      const viewer = { index: 0, isOpen: false };
      const pts = new Map();
      const clamp = (v, a, b) => Math.min(Math.max(v, a), b);
      const SWIPE_HORIZONTAL_THRESHOLD = 48;
      const SWIPE_VERTICAL_LIMIT = 40;
      const quickZoomScale = () => Math.min(3, state.max);
      let images = [];
      let pinchStart = null;
      let raf = null;
      let idleTimer = null;
      let startDrag = null;
      let swipeIntent = null;
      let focusables = [];
      let firstEl = null;
      let lastEl = null;
      let prevActive = null;

      const apply = () => {
        zoomedImage.style.transform = `translate3d(${state.tx}px, ${state.ty}px, 0) scale(${state.scale})`;
        const needsReset = (state.scale > 1.01 || Math.abs(state.tx) > 1 || Math.abs(state.ty) > 1);
        if (zoomToggle) {
          zoomToggle.innerHTML = needsReset ? iconZoomReset : iconZoomIn;
        }
        zoomToggle.setAttribute('aria-label', needsReset ? 'Reset zoom' : 'Zoom in');
      };

      const clampPan = () => {
        const contentW = state.baseW * state.scale;
        const contentH = state.baseH * state.scale;
        const maxX = Math.max(0, (contentW - state.viewW) / 2);
        const maxY = Math.max(0, (contentH - state.viewH) / 2);
        const allowOvershoot = lightbox.classList.contains('dragging') && state.scale > 1;
        const overshootFactor = allowOvershoot ? 0.18 : 0;
        const bufferX = allowOvershoot ? Math.min(state.viewW * overshootFactor, 140) : 0;
        const bufferY = allowOvershoot ? Math.min(state.viewH * overshootFactor, 140) : 0;
        state.tx = clamp(state.tx, -maxX - bufferX, maxX + bufferX);
        state.ty = clamp(state.ty, -maxY - bufferY, maxY + bufferY);
      };

      const schedule = () => {
        if (!raf) {
          raf = requestAnimationFrame(() => {
            raf = null;
            clampPan();
            apply();
          });
        }
      };

      function measureBase() {
        const prev = zoomedImage.style.transform;
        zoomedImage.style.transform = 'translate3d(0,0,0) scale(1)';
        const rect = zoomedImage.getBoundingClientRect();
        const stageRect = stage.getBoundingClientRect();
        state.baseW = rect.width;
        state.baseH = rect.height;
        state.viewW = stageRect.width;
        state.viewH = stageRect.height;
        zoomedImage.style.transform = prev;
        if (zoomedImage.naturalWidth && state.baseW) {
          const limitW = zoomedImage.naturalWidth / state.baseW;
          const limitH = zoomedImage.naturalHeight / state.baseH;
          state.max = Math.max(1, Math.min(6, limitW, limitH));
        }
      }

      const showUI = () => {
        lightbox.classList.remove('ui-hidden');
        clearTimeout(idleTimer);
        idleTimer = setTimeout(() => lightbox.classList.add('ui-hidden'), 1600);
      };

      function buildDots() {
        dotsWrap.innerHTML = '';
        images.forEach((_, i) => {
          const dot = document.createElement('button');
          dot.type = 'button';
          dot.className = 'dot';
          dot.setAttribute('aria-label', `Go to image ${i + 1}`);
          dot.addEventListener('click', () => setSlide(i));
          dotsWrap.appendChild(dot);
        });
      }

      function updateDots() {
        const children = dotsWrap.children;
        for (let i = 0; i < children.length; i += 1) {
          children[i].setAttribute('aria-current', i === viewer.index ? 'true' : 'false');
        }
      }

      function resetView() {
        state.scale = 1;
        state.tx = 0;
        state.ty = 0;
        schedule();
      }

      function zoomAt(cx, cy, nextScale) {
        const target = clamp(nextScale, state.min, state.max);
        const prevScale = state.scale;
        if (target === prevScale) return;
        state.tx = cx - (cx - state.tx) * (target / prevScale);
        state.ty = cy - (cy - state.ty) * (target / prevScale);
        state.scale = target;
        schedule();
      }

      function setSlide(index) {
        if (!images.length) {
          return;
        }
        viewer.index = (index + images.length) % images.length;
        const item = images[viewer.index];
        zoomedImage.alt = item.alt || '';
        zoomedImage.removeAttribute('srcset');
        zoomedImage.removeAttribute('sizes');
        counter.textContent = `${viewer.index + 1} / ${images.length}`;
        updateDots();
        [viewer.index - 1, viewer.index + 1].forEach((ii) => {
          const neighbor = images[(ii + images.length) % images.length];
          if (neighbor) {
            const preload = new Image();
            preload.src = neighbor.src;
          }
        });
        const finalizeSwap = () => {
          measureBase();
          resetView();
          requestAnimationFrame(() => {
            zoomedImage.classList.remove('is-swapping');
          });
        };

        const beginSwap = () => {
          zoomedImage.classList.add('is-swapping');
          const handleLoad = () => {
            zoomedImage.removeEventListener('error', handleError);
            finalizeSwap();
          };
          const handleError = () => {
            zoomedImage.removeEventListener('load', handleLoad);
            requestAnimationFrame(() => {
              zoomedImage.classList.remove('is-swapping');
            });
          };
          zoomedImage.addEventListener('load', handleLoad, { once: true });
          zoomedImage.addEventListener('error', handleError, { once: true });
          zoomedImage.src = item.src;
          if (zoomedImage.complete && zoomedImage.naturalWidth > 0) {
            handleLoad();
          }
        };

        zoomedImage.onload = null;
        zoomedImage.onerror = null;
        if (zoomedImage.src !== item.src) {
          beginSwap();
        } else {
          finalizeSwap();
        }
        showUI();
      }

      function openLightbox(index, opener) {
        if (!images.length) {
          return;
        }
        viewer.isOpen = true;
        lightbox.classList.add('open');
        lightbox.setAttribute('aria-hidden', 'false');
        body.dataset.prevOverflow = body.style.overflow || '';
        body.style.overflow = 'hidden';
        prevActive = opener || document.activeElement;
        setSlide(index);
        trapFocus();
        zoomToggle.focus();
      }

      function closeLightbox() {
        viewer.isOpen = false;
        lightbox.classList.remove('open', 'ui-hidden', 'dragging');
        lightbox.setAttribute('aria-hidden', 'true');
        body.style.overflow = body.dataset.prevOverflow || '';
        pts.clear();
        pinchStart = null;
        startDrag = null;
        clearTimeout(idleTimer);
        releaseFocus();
      }

      closeBtn.addEventListener('click', closeLightbox);
      zoomToggle.addEventListener('click', () => {
        if (state.scale > 1.01 || Math.abs(state.tx) > 1 || Math.abs(state.ty) > 1) {
          resetView();
        } else {
          zoomAt(0, 0, quickZoomScale());
        }
      });
      prevBtn.addEventListener('click', () => setSlide(viewer.index - 1));
      nextBtn.addEventListener('click', () => setSlide(viewer.index + 1));

      lightbox.addEventListener('mousemove', showUI);
      lightbox.addEventListener('click', (event) => {
        if (event.target === lightbox) closeLightbox();
      });

      window.addEventListener('keydown', (event) => {
        if (!viewer.isOpen) return;
        if (event.key === 'Escape') {
          event.preventDefault();
          closeLightbox();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          setSlide(viewer.index + 1);
        } else if (event.key === 'ArrowLeft') {
          event.preventDefault();
          setSlide(viewer.index - 1);
        } else if (event.key === '+' || (event.key === '=' && (event.ctrlKey || event.metaKey))) {
          event.preventDefault();
          zoomAt(0, 0, state.scale * 1.25);
        } else if (event.key === '-' || (event.key === '_' && (event.ctrlKey || event.metaKey))) {
          event.preventDefault();
          zoomAt(0, 0, state.scale / 1.25);
        }
      });

      stage.addEventListener('dblclick', (event) => {
        const rect = stage.getBoundingClientRect();
        const cx = event.clientX - (rect.left + rect.width / 2);
        const cy = event.clientY - (rect.top + rect.height / 2);
        const targetScale = state.scale > 1 ? 1 : quickZoomScale();
        zoomAt(cx, cy, targetScale);
      });

      stage.addEventListener('pointerdown', (event) => {
        if (!viewer.isOpen) return;
        stage.setPointerCapture(event.pointerId);
        pts.set(event.pointerId, { x: event.clientX, y: event.clientY });
        if (pts.size === 1) {
          startDrag = { x: event.clientX, y: event.clientY, atScale: state.scale };
          swipeIntent = null;
        }
        if (pts.size === 2) {
          startDrag = null;
          swipeIntent = null;
          const [a, b] = [...pts.values()];
          const dx = b.x - a.x;
          const dy = b.y - a.y;
          const dist = Math.hypot(dx, dy);
          const rect = stage.getBoundingClientRect();
          const cx = (a.x + b.x) / 2 - (rect.left + rect.width / 2);
          const cy = (a.y + b.y) / 2 - (rect.top + rect.height / 2);
          pinchStart = { dist, scale: state.scale, cx, cy };
        }
        lightbox.classList.add('dragging');
        showUI();
      });

      stage.addEventListener('pointermove', (event) => {
        if (!pts.has(event.pointerId)) return;
        const previous = pts.get(event.pointerId);
        const current = { x: event.clientX, y: event.clientY };
        pts.set(event.pointerId, current);

        if (pts.size === 1 && startDrag) {
          const zoomedNow = state.scale > 1.001;
          const startedZoomed = startDrag.atScale > 1.001;
          if (zoomedNow || startedZoomed) {
            state.tx += current.x - previous.x;
            state.ty += current.y - previous.y;
            schedule();
          } else {
            const dx = current.x - startDrag.x;
            const dy = current.y - startDrag.y;
            if (Math.abs(dy) <= SWIPE_VERTICAL_LIMIT && Math.abs(dx) >= SWIPE_HORIZONTAL_THRESHOLD) {
              swipeIntent = dx < 0 ? 'next' : 'prev';
            } else if (Math.abs(dx) < SWIPE_HORIZONTAL_THRESHOLD || Math.abs(dy) > SWIPE_VERTICAL_LIMIT) {
              swipeIntent = null;
            }
          }
        } else if (pts.size === 2 && pinchStart) {
          const [a, b] = [...pts.values()];
          const dx = b.x - a.x;
          const dy = b.y - a.y;
          const dist = Math.hypot(dx, dy);
          const nextScale = clamp(pinchStart.scale * (dist / pinchStart.dist), state.min, state.max);
          zoomAt(pinchStart.cx, pinchStart.cy, nextScale);
        }
      }, { passive: false });

      const endPointer = (event) => {
        if (!pts.has(event.pointerId)) return;
        const dragSnapshot = startDrag;
        const intent = swipeIntent;
        pts.delete(event.pointerId);
        if (pts.size < 2) pinchStart = null;

        if (!pts.size) {
          swipeIntent = null;
          if (dragSnapshot && dragSnapshot.atScale === 1 && state.scale === 1 && intent) {
            setSlide(viewer.index + (intent === 'next' ? 1 : -1));
          }
          lightbox.classList.remove('dragging');
          startDrag = null;
          schedule();
        } else if (pts.size === 1) {
          const [, point] = pts.entries().next().value;
          startDrag = { x: point.x, y: point.y, atScale: state.scale };
          swipeIntent = null;
        } else {
          startDrag = null;
          swipeIntent = null;
        }
      };
      stage.addEventListener('pointerup', endPointer);
      stage.addEventListener('pointercancel', endPointer);
      stage.addEventListener('pointerleave', endPointer);

      stage.addEventListener('wheel', (event) => {
        if (!viewer.isOpen) return;
        event.preventDefault();
        const factor = Math.exp(-event.deltaY * 0.0015);
        const rect = stage.getBoundingClientRect();
        const cx = event.clientX - (rect.left + rect.width / 2);
        const cy = event.clientY - (rect.top + rect.height / 2);
        zoomAt(cx, cy, state.scale * factor);
        showUI();
      }, { passive: false });

      new ResizeObserver(() => {
        if (viewer.isOpen) {
          measureBase();
          schedule();
        }
      }).observe(stage);

      function trapFocus() {
        focusables = [...lightbox.querySelectorAll('button,[href],[tabindex]:not([tabindex="-1"])')];
        firstEl = focusables[0] || null;
        lastEl = focusables[focusables.length - 1] || null;
        lightbox.addEventListener('keydown', focusTrapHandler);
      }

      function focusTrapHandler(event) {
        if (event.key !== 'Tab' || focusables.length === 0) return;
        if (event.shiftKey && document.activeElement === firstEl) {
          event.preventDefault();
          lastEl?.focus();
        } else if (!event.shiftKey && document.activeElement === lastEl) {
          event.preventDefault();
          firstEl?.focus();
        }
      }

      function releaseFocus() {
        lightbox.removeEventListener('keydown', focusTrapHandler);
        prevActive?.focus?.();
      }

      return {
        setImages(list) {
          images = (list || []).filter((item) => item && item.src);
          viewer.index = 0;
          buildDots();
          if (!images.length) {
            zoomedImage.removeAttribute('src');
            counter.textContent = '';
            return;
          }
          updateDots();
          counter.textContent = `${viewer.index + 1} / ${images.length}`;
          if (viewer.isOpen) {
            setSlide(viewer.index);
          }
        },
        openAt(index, opener) {
          const targetIndex = typeof index === 'number' ? index : viewer.index;
          openLightbox(targetIndex, opener);
        },
        setActiveIndex(index) {
          if (!images.length) {
            viewer.index = 0;
            counter.textContent = '';
            return;
          }
          viewer.index = (index + images.length) % images.length;
          updateDots();
          counter.textContent = `${viewer.index + 1} / ${images.length}`;
        }
      };
    }
  }
</script>

